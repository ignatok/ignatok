Index: transactions/migrations/0005_auto_20190612_1926.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/migrations/0005_auto_20190612_1926.py	(date 1560367619386)
+++ transactions/migrations/0005_auto_20190612_1926.py	(date 1560367619386)
@@ -0,0 +1,22 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.20 on 2019-06-12 19:26
+from __future__ import unicode_literals
+
+from decimal import Decimal
+import django.core.validators
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('transactions', '0004_auto_20190612_1915'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='depositproduct',
+            name='amount',
+            field=models.DecimalField(decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
+        ),
+    ]
Index: transactions/migrations/0006_auto_20190612_1928.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/migrations/0006_auto_20190612_1928.py	(date 1560367706525)
+++ transactions/migrations/0006_auto_20190612_1928.py	(date 1560367706525)
@@ -0,0 +1,22 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.20 on 2019-06-12 19:28
+from __future__ import unicode_literals
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('transactions', '0005_auto_20190612_1926'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='depositproduct',
+            name='user',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='depositProduct', to=settings.AUTH_USER_MODEL),
+        ),
+    ]
Index: transactions/migrations/0004_auto_20190612_1915.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/migrations/0004_auto_20190612_1915.py	(date 1560366902954)
+++ transactions/migrations/0004_auto_20190612_1915.py	(date 1560366902954)
@@ -0,0 +1,30 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.20 on 2019-06-12 19:15
+from __future__ import unicode_literals
+
+from decimal import Decimal
+from django.conf import settings
+import django.core.validators
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('transactions', '0003_depositproduct'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='depositproduct',
+            name='amount',
+            field=models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
+            preserve_default=False,
+        ),
+        migrations.AlterField(
+            model_name='depositproduct',
+            name='user',
+            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='depositProduct', to=settings.AUTH_USER_MODEL),
+        ),
+    ]
Index: managment/commands/simple_command.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- managment/commands/simple_command.py	(date 1560364460919)
+++ managment/commands/simple_command.py	(date 1560364460919)
@@ -0,0 +1,20 @@
+from django.core.management.base import BaseCommand, CommandError
+from accounts.models import User as Poll
+
+class Command(BaseCommand):
+    help = 'Closes the specified poll for voting'
+
+    def add_arguments(self, parser):
+        parser.add_argument('poll_ids', nargs='+', type=int)
+
+    def handle(self, *args, **options):
+        for poll_id in options['poll_ids']:
+            try:
+                poll = Poll.objects.get(pk=poll_id)
+            except Poll.DoesNotExist:
+                raise CommandError('Poll "%s" does not exist' % poll_id)
+
+            poll.opened = False
+            poll.save()
+
+            self.stdout.write(self.style.SUCCESS('Successfully closed poll "%s"' % poll_id))
\ No newline at end of file
Index: transactions/migrations/0003_depositproduct.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/migrations/0003_depositproduct.py	(date 1560366121693)
+++ transactions/migrations/0003_depositproduct.py	(date 1560366121693)
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.20 on 2019-06-12 19:02
+from __future__ import unicode_literals
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('transactions', '0002_auto_20190504_2012'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='DepositProduct',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('timestamp', models.DateTimeField(auto_now_add=True)),
+                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='deposit_product', to=settings.AUTH_USER_MODEL)),
+            ],
+        ),
+    ]
Index: managment/commands/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- managment/commands/__init__.py	(date 1560363603631)
+++ managment/commands/__init__.py	(date 1560363603631)
@@ -0,0 +1,0 @@
Index: managment/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- managment/__init__.py	(date 1560363581731)
+++ managment/__init__.py	(date 1560363581731)
@@ -0,0 +1,0 @@
Index: transactions/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from decimal import Decimal\nfrom django.conf import settings\nfrom django.core.validators import MinValueValidator\nfrom django.db import models\n\n\nUser = settings.AUTH_USER_MODEL\n\n\nclass Diposit(models.Model):\n    user = models.ForeignKey(\n        User,\n        related_name='deposits',\n        on_delete=models.CASCADE,\n    )\n    amount = models.DecimalField(\n        decimal_places=2,\n        max_digits=12,\n        validators=[\n            MinValueValidator(Decimal('10.00'))\n        ]\n    )\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return str(self.user)\n\n\nclass Withdrawal(models.Model):\n    user = models.ForeignKey(\n        User,\n        related_name='withdrawals',\n        on_delete=models.CASCADE,\n    )\n    amount = models.DecimalField(\n        decimal_places=2,\n        max_digits=12,\n        validators=[\n            MinValueValidator(Decimal('10.00'))\n        ]\n    )\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return str(self.user)\n\n\nclass Interest(models.Model):\n    user = models.ForeignKey(\n        User,\n        related_name='interests',\n        on_delete=models.CASCADE,\n    )\n    amount = models.DecimalField(\n        decimal_places=2,\n        max_digits=12,\n    )\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return str(self.user)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/models.py	(date 1560243462000)
+++ transactions/models.py	(date 1560367701989)
@@ -6,6 +6,26 @@
 
 User = settings.AUTH_USER_MODEL
 
+class DepositProduct(models.Model):
+    user = models.ForeignKey(
+        User,
+        related_name='depositProduct',
+        on_delete=models.CASCADE,
+        null=True,
+    )
+    amount = models.DecimalField(
+        decimal_places=2,
+        max_digits=12,
+        null=True,
+        validators=[
+            MinValueValidator(Decimal('0.00'))
+        ]
+    )
+    timestamp = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return str(self.user)
+
 
 class Diposit(models.Model):
     user = models.ForeignKey(
Index: accounts/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import messages\nfrom django.contrib.auth import (\n    authenticate,\n    login,\n    logout,\n)\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import Http404\nfrom django.shortcuts import render, redirect, get_object_or_404\n\nfrom .forms import (\n    UserLoginForm, UserRegistrationForm,\n    AccountDetailsForm, UserAddressForm,\n)\nfrom .models import User\n\n\ndef register_view(request):\n    if request.user.is_authenticated:\n        return redirect(\"home\")\n    else:\n        user_form = UserRegistrationForm(\n            request.POST or None,\n        )\n        account_form = AccountDetailsForm(\n            request.POST or None,\n            request.FILES or None\n        )\n        address_form = UserAddressForm(\n            request.POST or None\n        )\n\n        if user_form.is_valid() and account_form.is_valid() and address_form.is_valid():\n            user = user_form.save(commit=False)\n            account_details = account_form.save(commit=False)\n            address = address_form.save(commit=False)\n            password = user_form.cleaned_data.get(\"password1\")\n            user.set_password(password)\n            user.save()\n            account_details.user = user\n            account_details.save()\n            address.user = user\n            address.save()\n            new_user = authenticate(\n                account_no=user.account_no, password=password\n            )\n            login(\n                request, new_user, backend='accounts.backends.AccountNoBackend'\n            )\n            messages.success(\n                request,\n                '''Thank You For Creating A Bank Account {}.\n                Your Account Number is {}, Please use this number to login\n                '''.format(new_user.full_name, new_user.account_no))\n\n            return redirect(\"home\")\n\n        context = {\n            \"title\": \"Create a Bank Account\",\n            \"user_form\": user_form,\n            \"account_form\": account_form,\n            \"address_form\": address_form,\n        }\n\n        return render(request, \"accounts/register_form.html\", context)\n\n\ndef login_view(request):\n    if request.user.is_authenticated:\n        return redirect(\"home\")\n    else:\n        form = UserLoginForm(request.POST or None)\n\n        if form.is_valid():\n            account_no = form.cleaned_data.get(\"account_no\")\n            password = form.cleaned_data.get(\"password\")\n            # authenticate with Account No & Password\n            user = authenticate(account_no=account_no, password=password)\n            login(request, user, backend='accounts.backends.AccountNoBackend')\n            messages.success(request, 'Welcome, {}!' .format(user.full_name))\n            return redirect(\"home\")\n\n        context = {\"form\": form,\n                   \"title\": \"Load Account Details\",\n                   }\n\n        return render(request, \"accounts/form.html\", context)\n\n\ndef logout_view(request):\n    if not request.user.is_authenticated:\n        return redirect(\"accounts:login\")\n    else:\n        logout(request)\n        return redirect(\"home\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- accounts/views.py	(date 1560243462000)
+++ accounts/views.py	(date 1560353711295)
@@ -4,8 +4,7 @@
     login,
     logout,
 )
-from django.contrib.auth.decorators import login_required
-from django.http import Http404
+
 from django.shortcuts import render, redirect, get_object_or_404
 
 from .forms import (
Index: transactions/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\n\nfrom .models import Diposit, Withdrawal, Interest\n# Register your models here.\n\nadmin.site.register(Diposit)\nadmin.site.register(Withdrawal)\nadmin.site.register(Interest)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/admin.py	(date 1560243462000)
+++ transactions/admin.py	(date 1560366732280)
@@ -1,8 +1,9 @@
 from django.contrib import admin
 
-from .models import Diposit, Withdrawal, Interest
+from .models import Diposit, Withdrawal, Interest, DepositProduct
 # Register your models here.
 
 admin.site.register(Diposit)
 admin.site.register(Withdrawal)
 admin.site.register(Interest)
+admin.site.register(DepositProduct)
Index: bankingsystem/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for bankingsystem project.\n\nGenerated by 'django-admin startproject' using Django 1.11.4.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.11/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/1.11/ref/settings/\n\"\"\"\n\nimport os\nfrom django.contrib.messages import constants as messages\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = ')_z--t-qq1=s!l*c-1pg(%$3l%=ys9m7!fh@jtom47ozn-24^*'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'celery',\n    'django_celery_beat',\n    'crispy_forms',\n\n    'accounts',\n    'core',\n    'transactions',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nAUTH_USER_MODEL = 'accounts.User'\n\nLOGIN_URL = \"/accounts/login/\"\n\nROOT_URLCONF = 'bankingsystem.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bankingsystem.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/1.11/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.11/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\n\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\n\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n\n\nCELERY_BROKER_URL = 'redis://localhost:6379'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n\nMESSAGE_TAGS = {\n    messages.SUCCESS: 'alert-success',\n    messages.ERROR: 'alert-danger',\n}\n\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'accounts.backends.AccountNoBackend',\n)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bankingsystem/settings.py	(date 1560243462000)
+++ bankingsystem/settings.py	(date 1560363298969)
@@ -92,6 +92,14 @@
     }
 }
 
+# DATABASES = {
+#     'default': {
+#         'ENGINE': 'djongo',
+#         'NAME': 'db_mon',
+#         # 'HOST': 'ignis-GL553VE',
+#         # 'PORT': 27017,
+#     }
+# }
 
 # Password validation
 # https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
Index: transactions/tasks.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from __future__ import absolute_import, unicode_literals\nfrom celery import task\n\nfrom accounts.models import User\nfrom .models import Interest\n\n\n@task(name=\"count_interest\" )\ndef count():\n    users = User.objects.filter(account__balance__isnull=False)\n\n    if users.exists():\n        for user in users:\n            balance = user.balance\n            # calculates users interest\n            amount = (balance * 10) / 100\n            Interest.objects.create(user=user, amount=amount)\n            # adds users interest to balance.\n            user.account.balance += amount\n            user.account.save()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/tasks.py	(date 1560243462000)
+++ transactions/tasks.py	(date 1560367611178)
@@ -13,7 +13,7 @@
         for user in users:
             balance = user.balance
             # calculates users interest
-            amount = (balance * 10) / 100
+            amount = balance/100*Interest.amount
             Interest.objects.create(user=user, amount=amount)
             # adds users interest to balance.
             user.account.balance += amount
Index: transactions/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django import forms\n\nfrom .models import Diposit, Withdrawal\n\n\nclass DepositForm(forms.ModelForm):\n    class Meta:\n        model = Diposit\n        fields = [\"amount\"]\n\n\nclass WithdrawalForm(forms.ModelForm):\n    class Meta:\n        model = Withdrawal\n        fields = [\"amount\"]\n\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super(WithdrawalForm, self).__init__(*args, **kwargs)\n\n    def clean_amount(self):\n        amount = self.cleaned_data['amount']\n\n        if self.user.account.balance < amount:\n            raise forms.ValidationError(\n                'You Can Not Withdraw More Than You Balance.'\n            )\n\n        return amount\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transactions/forms.py	(date 1560243462000)
+++ transactions/forms.py	(date 1560366645590)
@@ -1,6 +1,6 @@
 from django import forms
 
-from .models import Diposit, Withdrawal
+from .models import Diposit, Withdrawal,DepositProduct
 
 
 class DepositForm(forms.ModelForm):
@@ -8,6 +8,10 @@
         model = Diposit
         fields = ["amount"]
 
+class DepositProductForm(forms.ModelForm):
+    class Meta:
+        model = DepositProduct
+        fields = ["amount"]
 
 class WithdrawalForm(forms.ModelForm):
     class Meta:
